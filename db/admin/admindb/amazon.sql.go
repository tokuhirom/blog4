// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: amazon.sql

package admindb

import (
	"context"
	"database/sql"
)

const countAmazonCacheByAsin = `-- name: CountAmazonCacheByAsin :one
SELECT count(1)
FROM amazon_cache
WHERE asin = ?
`

func (q *Queries) CountAmazonCacheByAsin(ctx context.Context, asin string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAmazonCacheByAsin, asin)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAmazonImageUrlByAsin = `-- name: GetAmazonImageUrlByAsin :one
SELECT image_medium_url
FROM amazon_cache
WHERE asin = ?
`

func (q *Queries) GetAmazonImageUrlByAsin(ctx context.Context, asin string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getAmazonImageUrlByAsin, asin)
	var image_medium_url sql.NullString
	err := row.Scan(&image_medium_url)
	return image_medium_url, err
}

const insertAmazonProductDetail = `-- name: InsertAmazonProductDetail :execrows
INSERT INTO amazon_cache (asin, title, image_medium_url, link) VALUES (?, ?, ?, ?)
`

type InsertAmazonProductDetailParams struct {
	Asin           string
	Title          sql.NullString
	ImageMediumUrl sql.NullString
	Link           string
}

func (q *Queries) InsertAmazonProductDetail(ctx context.Context, arg InsertAmazonProductDetailParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertAmazonProductDetail,
		arg.Asin,
		arg.Title,
		arg.ImageMediumUrl,
		arg.Link,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
