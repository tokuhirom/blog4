// Code generated by MockGen. DO NOT EDIT.
// Source: /home/tokuhirom/work/blog4/db/admin/admindb/querier.go
//
// Generated by this command:
//
//	mockgen -source=/home/tokuhirom/work/blog4/db/admin/admindb/querier.go -destination=/home/tokuhirom/work/blog4/db/admin/admindb/mock_querier.go -package=admindb Querier
//

// Package admindb is a generated GoMock package.
package admindb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AdminGetEntryByPath mocks base method.
func (m *MockQuerier) AdminGetEntryByPath(ctx context.Context, path string) (AdminGetEntryByPathRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetEntryByPath", ctx, path)
	ret0, _ := ret[0].(AdminGetEntryByPathRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetEntryByPath indicates an expected call of AdminGetEntryByPath.
func (mr *MockQuerierMockRecorder) AdminGetEntryByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetEntryByPath", reflect.TypeOf((*MockQuerier)(nil).AdminGetEntryByPath), ctx, path)
}

// CountAmazonCacheByAsin mocks base method.
func (m *MockQuerier) CountAmazonCacheByAsin(ctx context.Context, asin string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAmazonCacheByAsin", ctx, asin)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAmazonCacheByAsin indicates an expected call of CountAmazonCacheByAsin.
func (mr *MockQuerierMockRecorder) CountAmazonCacheByAsin(ctx, asin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAmazonCacheByAsin", reflect.TypeOf((*MockQuerier)(nil).CountAmazonCacheByAsin), ctx, asin)
}

// CreateEmptyEntry mocks base method.
func (m *MockQuerier) CreateEmptyEntry(ctx context.Context, arg CreateEmptyEntryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmptyEntry", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmptyEntry indicates an expected call of CreateEmptyEntry.
func (mr *MockQuerierMockRecorder) CreateEmptyEntry(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyEntry", reflect.TypeOf((*MockQuerier)(nil).CreateEmptyEntry), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), ctx, arg)
}

// DeleteEntry mocks base method.
func (m *MockQuerier) DeleteEntry(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockQuerierMockRecorder) DeleteEntry(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockQuerier)(nil).DeleteEntry), ctx, path)
}

// DeleteEntryImageByPath mocks base method.
func (m *MockQuerier) DeleteEntryImageByPath(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryImageByPath", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntryImageByPath indicates an expected call of DeleteEntryImageByPath.
func (mr *MockQuerierMockRecorder) DeleteEntryImageByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryImageByPath", reflect.TypeOf((*MockQuerier)(nil).DeleteEntryImageByPath), ctx, path)
}

// DeleteEntryLinkByPath mocks base method.
func (m *MockQuerier) DeleteEntryLinkByPath(ctx context.Context, srcPath string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryLinkByPath", ctx, srcPath)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntryLinkByPath indicates an expected call of DeleteEntryLinkByPath.
func (mr *MockQuerierMockRecorder) DeleteEntryLinkByPath(ctx, srcPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryLinkByPath", reflect.TypeOf((*MockQuerier)(nil).DeleteEntryLinkByPath), ctx, srcPath)
}

// DeleteExpiredSessions mocks base method.
func (m *MockQuerier) DeleteExpiredSessions(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSessions", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredSessions indicates an expected call of DeleteExpiredSessions.
func (mr *MockQuerierMockRecorder) DeleteExpiredSessions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSessions", reflect.TypeOf((*MockQuerier)(nil).DeleteExpiredSessions), ctx)
}

// DeleteSession mocks base method.
func (m *MockQuerier) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQuerierMockRecorder) DeleteSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSession), ctx, sessionID)
}

// GetAllEntryTitles mocks base method.
func (m *MockQuerier) GetAllEntryTitles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntryTitles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntryTitles indicates an expected call of GetAllEntryTitles.
func (mr *MockQuerierMockRecorder) GetAllEntryTitles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntryTitles", reflect.TypeOf((*MockQuerier)(nil).GetAllEntryTitles), ctx)
}

// GetAmazonImageUrlByAsin mocks base method.
func (m *MockQuerier) GetAmazonImageUrlByAsin(ctx context.Context, asin string) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmazonImageUrlByAsin", ctx, asin)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmazonImageUrlByAsin indicates an expected call of GetAmazonImageUrlByAsin.
func (mr *MockQuerierMockRecorder) GetAmazonImageUrlByAsin(ctx, asin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmazonImageUrlByAsin", reflect.TypeOf((*MockQuerier)(nil).GetAmazonImageUrlByAsin), ctx, asin)
}

// GetEntriesByLinkedTitle mocks base method.
func (m *MockQuerier) GetEntriesByLinkedTitle(ctx context.Context, dstTitle string) ([]Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByLinkedTitle", ctx, dstTitle)
	ret0, _ := ret[0].([]Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntriesByLinkedTitle indicates an expected call of GetEntriesByLinkedTitle.
func (mr *MockQuerierMockRecorder) GetEntriesByLinkedTitle(ctx, dstTitle any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByLinkedTitle", reflect.TypeOf((*MockQuerier)(nil).GetEntriesByLinkedTitle), ctx, dstTitle)
}

// GetEntryImageNotProcessedEntries mocks base method.
func (m *MockQuerier) GetEntryImageNotProcessedEntries(ctx context.Context) ([]Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryImageNotProcessedEntries", ctx)
	ret0, _ := ret[0].([]Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryImageNotProcessedEntries indicates an expected call of GetEntryImageNotProcessedEntries.
func (mr *MockQuerierMockRecorder) GetEntryImageNotProcessedEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryImageNotProcessedEntries", reflect.TypeOf((*MockQuerier)(nil).GetEntryImageNotProcessedEntries), ctx)
}

// GetEntryVisibility mocks base method.
func (m *MockQuerier) GetEntryVisibility(ctx context.Context, path string) (GetEntryVisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryVisibility", ctx, path)
	ret0, _ := ret[0].(GetEntryVisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryVisibility indicates an expected call of GetEntryVisibility.
func (mr *MockQuerierMockRecorder) GetEntryVisibility(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryVisibility", reflect.TypeOf((*MockQuerier)(nil).GetEntryVisibility), ctx, path)
}

// GetLatestEntries mocks base method.
func (m *MockQuerier) GetLatestEntries(ctx context.Context, arg GetLatestEntriesParams) ([]GetLatestEntriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEntries", ctx, arg)
	ret0, _ := ret[0].([]GetLatestEntriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEntries indicates an expected call of GetLatestEntries.
func (mr *MockQuerierMockRecorder) GetLatestEntries(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEntries", reflect.TypeOf((*MockQuerier)(nil).GetLatestEntries), ctx, arg)
}

// GetLinkedEntries mocks base method.
func (m *MockQuerier) GetLinkedEntries(ctx context.Context, srcPath string) ([]GetLinkedEntriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedEntries", ctx, srcPath)
	ret0, _ := ret[0].([]GetLinkedEntriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedEntries indicates an expected call of GetLinkedEntries.
func (mr *MockQuerierMockRecorder) GetLinkedEntries(ctx, srcPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedEntries", reflect.TypeOf((*MockQuerier)(nil).GetLinkedEntries), ctx, srcPath)
}

// GetSession mocks base method.
func (m *MockQuerier) GetSession(ctx context.Context, sessionID string) (AdminSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(AdminSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockQuerierMockRecorder) GetSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockQuerier)(nil).GetSession), ctx, sessionID)
}

// InsertAmazonProductDetail mocks base method.
func (m *MockQuerier) InsertAmazonProductDetail(ctx context.Context, arg InsertAmazonProductDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAmazonProductDetail", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAmazonProductDetail indicates an expected call of InsertAmazonProductDetail.
func (mr *MockQuerierMockRecorder) InsertAmazonProductDetail(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAmazonProductDetail", reflect.TypeOf((*MockQuerier)(nil).InsertAmazonProductDetail), ctx, arg)
}

// InsertEntryImage mocks base method.
func (m *MockQuerier) InsertEntryImage(ctx context.Context, arg InsertEntryImageParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEntryImage", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEntryImage indicates an expected call of InsertEntryImage.
func (mr *MockQuerierMockRecorder) InsertEntryImage(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEntryImage", reflect.TypeOf((*MockQuerier)(nil).InsertEntryImage), ctx, arg)
}

// InsertEntryLink mocks base method.
func (m *MockQuerier) InsertEntryLink(ctx context.Context, arg InsertEntryLinkParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEntryLink", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEntryLink indicates an expected call of InsertEntryLink.
func (mr *MockQuerierMockRecorder) InsertEntryLink(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEntryLink", reflect.TypeOf((*MockQuerier)(nil).InsertEntryLink), ctx, arg)
}

// UpdateEntryBody mocks base method.
func (m *MockQuerier) UpdateEntryBody(ctx context.Context, arg UpdateEntryBodyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryBody", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntryBody indicates an expected call of UpdateEntryBody.
func (mr *MockQuerierMockRecorder) UpdateEntryBody(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryBody", reflect.TypeOf((*MockQuerier)(nil).UpdateEntryBody), ctx, arg)
}

// UpdateEntryTitle mocks base method.
func (m *MockQuerier) UpdateEntryTitle(ctx context.Context, arg UpdateEntryTitleParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryTitle", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntryTitle indicates an expected call of UpdateEntryTitle.
func (mr *MockQuerierMockRecorder) UpdateEntryTitle(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryTitle", reflect.TypeOf((*MockQuerier)(nil).UpdateEntryTitle), ctx, arg)
}

// UpdatePublishedAt mocks base method.
func (m *MockQuerier) UpdatePublishedAt(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublishedAt", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublishedAt indicates an expected call of UpdatePublishedAt.
func (mr *MockQuerierMockRecorder) UpdatePublishedAt(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublishedAt", reflect.TypeOf((*MockQuerier)(nil).UpdatePublishedAt), ctx, path)
}

// UpdateSessionLastAccessed mocks base method.
func (m *MockQuerier) UpdateSessionLastAccessed(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionLastAccessed", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessionLastAccessed indicates an expected call of UpdateSessionLastAccessed.
func (mr *MockQuerierMockRecorder) UpdateSessionLastAccessed(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionLastAccessed", reflect.TypeOf((*MockQuerier)(nil).UpdateSessionLastAccessed), ctx, sessionID)
}

// UpdateVisibility mocks base method.
func (m *MockQuerier) UpdateVisibility(ctx context.Context, arg UpdateVisibilityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVisibility", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVisibility indicates an expected call of UpdateVisibility.
func (mr *MockQuerierMockRecorder) UpdateVisibility(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVisibility", reflect.TypeOf((*MockQuerier)(nil).UpdateVisibility), ctx, arg)
}
