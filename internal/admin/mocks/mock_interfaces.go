// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_interfaces.go -package=mocks -mock_names=AdminStore=MockAdminStore,TxManager=MockTxManager,AmazonClient=MockAmazonClient,StorageClient=MockStorageClient,HubNotifier=MockHubNotifier,EntryImageProcessor=MockEntryImageProcessor,LinkPalletService=MockLinkPalletService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	io "io"
	reflect "reflect"

	admindb "github.com/tokuhirom/blog4/db/admin/admindb"
	admin "github.com/tokuhirom/blog4/internal/admin"
	openapi "github.com/tokuhirom/blog4/internal/admin/openapi"
	gomock "go.uber.org/mock/gomock"
)

// MockAdminStore is a mock of AdminStore interface.
type MockAdminStore struct {
	ctrl     *gomock.Controller
	recorder *MockAdminStoreMockRecorder
	isgomock struct{}
}

// MockAdminStoreMockRecorder is the mock recorder for MockAdminStore.
type MockAdminStoreMockRecorder struct {
	mock *MockAdminStore
}

// NewMockAdminStore creates a new mock instance.
func NewMockAdminStore(ctrl *gomock.Controller) *MockAdminStore {
	mock := &MockAdminStore{ctrl: ctrl}
	mock.recorder = &MockAdminStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminStore) EXPECT() *MockAdminStoreMockRecorder {
	return m.recorder
}

// AdminGetEntryByPath mocks base method.
func (m *MockAdminStore) AdminGetEntryByPath(ctx context.Context, path string) (admindb.AdminGetEntryByPathRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetEntryByPath", ctx, path)
	ret0, _ := ret[0].(admindb.AdminGetEntryByPathRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetEntryByPath indicates an expected call of AdminGetEntryByPath.
func (mr *MockAdminStoreMockRecorder) AdminGetEntryByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetEntryByPath", reflect.TypeOf((*MockAdminStore)(nil).AdminGetEntryByPath), ctx, path)
}

// CountAmazonCacheByAsin mocks base method.
func (m *MockAdminStore) CountAmazonCacheByAsin(ctx context.Context, asin string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAmazonCacheByAsin", ctx, asin)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAmazonCacheByAsin indicates an expected call of CountAmazonCacheByAsin.
func (mr *MockAdminStoreMockRecorder) CountAmazonCacheByAsin(ctx, asin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAmazonCacheByAsin", reflect.TypeOf((*MockAdminStore)(nil).CountAmazonCacheByAsin), ctx, asin)
}

// CreateEmptyEntry mocks base method.
func (m *MockAdminStore) CreateEmptyEntry(ctx context.Context, params admindb.CreateEmptyEntryParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmptyEntry", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmptyEntry indicates an expected call of CreateEmptyEntry.
func (mr *MockAdminStoreMockRecorder) CreateEmptyEntry(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyEntry", reflect.TypeOf((*MockAdminStore)(nil).CreateEmptyEntry), ctx, params)
}

// DeleteEntry mocks base method.
func (m *MockAdminStore) DeleteEntry(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockAdminStoreMockRecorder) DeleteEntry(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockAdminStore)(nil).DeleteEntry), ctx, path)
}

// DeleteEntryImageByPath mocks base method.
func (m *MockAdminStore) DeleteEntryImageByPath(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryImageByPath", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntryImageByPath indicates an expected call of DeleteEntryImageByPath.
func (mr *MockAdminStoreMockRecorder) DeleteEntryImageByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryImageByPath", reflect.TypeOf((*MockAdminStore)(nil).DeleteEntryImageByPath), ctx, path)
}

// DeleteEntryLinkByPath mocks base method.
func (m *MockAdminStore) DeleteEntryLinkByPath(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntryLinkByPath", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntryLinkByPath indicates an expected call of DeleteEntryLinkByPath.
func (mr *MockAdminStoreMockRecorder) DeleteEntryLinkByPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntryLinkByPath", reflect.TypeOf((*MockAdminStore)(nil).DeleteEntryLinkByPath), ctx, path)
}

// GetAllEntryTitles mocks base method.
func (m *MockAdminStore) GetAllEntryTitles(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntryTitles", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntryTitles indicates an expected call of GetAllEntryTitles.
func (mr *MockAdminStoreMockRecorder) GetAllEntryTitles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntryTitles", reflect.TypeOf((*MockAdminStore)(nil).GetAllEntryTitles), ctx)
}

// GetEntryVisibility mocks base method.
func (m *MockAdminStore) GetEntryVisibility(ctx context.Context, path string) (admindb.GetEntryVisibilityRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryVisibility", ctx, path)
	ret0, _ := ret[0].(admindb.GetEntryVisibilityRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryVisibility indicates an expected call of GetEntryVisibility.
func (mr *MockAdminStoreMockRecorder) GetEntryVisibility(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryVisibility", reflect.TypeOf((*MockAdminStore)(nil).GetEntryVisibility), ctx, path)
}

// GetLatestEntries mocks base method.
func (m *MockAdminStore) GetLatestEntries(ctx context.Context, params admindb.GetLatestEntriesParams) ([]admindb.GetLatestEntriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEntries", ctx, params)
	ret0, _ := ret[0].([]admindb.GetLatestEntriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEntries indicates an expected call of GetLatestEntries.
func (mr *MockAdminStoreMockRecorder) GetLatestEntries(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEntries", reflect.TypeOf((*MockAdminStore)(nil).GetLatestEntries), ctx, params)
}

// GetLinkedEntries mocks base method.
func (m *MockAdminStore) GetLinkedEntries(ctx context.Context, path string) ([]admindb.GetLinkedEntriesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkedEntries", ctx, path)
	ret0, _ := ret[0].([]admindb.GetLinkedEntriesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkedEntries indicates an expected call of GetLinkedEntries.
func (mr *MockAdminStoreMockRecorder) GetLinkedEntries(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkedEntries", reflect.TypeOf((*MockAdminStore)(nil).GetLinkedEntries), ctx, path)
}

// InsertAmazonProductDetail mocks base method.
func (m *MockAdminStore) InsertAmazonProductDetail(ctx context.Context, params admindb.InsertAmazonProductDetailParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAmazonProductDetail", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAmazonProductDetail indicates an expected call of InsertAmazonProductDetail.
func (mr *MockAdminStoreMockRecorder) InsertAmazonProductDetail(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAmazonProductDetail", reflect.TypeOf((*MockAdminStore)(nil).InsertAmazonProductDetail), ctx, params)
}

// UpdateEntryBody mocks base method.
func (m *MockAdminStore) UpdateEntryBody(ctx context.Context, params admindb.UpdateEntryBodyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryBody", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntryBody indicates an expected call of UpdateEntryBody.
func (mr *MockAdminStoreMockRecorder) UpdateEntryBody(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryBody", reflect.TypeOf((*MockAdminStore)(nil).UpdateEntryBody), ctx, params)
}

// UpdateEntryTitle mocks base method.
func (m *MockAdminStore) UpdateEntryTitle(ctx context.Context, params admindb.UpdateEntryTitleParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryTitle", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntryTitle indicates an expected call of UpdateEntryTitle.
func (mr *MockAdminStoreMockRecorder) UpdateEntryTitle(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryTitle", reflect.TypeOf((*MockAdminStore)(nil).UpdateEntryTitle), ctx, params)
}

// UpdatePublishedAt mocks base method.
func (m *MockAdminStore) UpdatePublishedAt(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublishedAt", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublishedAt indicates an expected call of UpdatePublishedAt.
func (mr *MockAdminStoreMockRecorder) UpdatePublishedAt(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublishedAt", reflect.TypeOf((*MockAdminStore)(nil).UpdatePublishedAt), ctx, path)
}

// UpdateVisibility mocks base method.
func (m *MockAdminStore) UpdateVisibility(ctx context.Context, params admindb.UpdateVisibilityParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVisibility", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVisibility indicates an expected call of UpdateVisibility.
func (mr *MockAdminStoreMockRecorder) UpdateVisibility(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVisibility", reflect.TypeOf((*MockAdminStore)(nil).UpdateVisibility), ctx, params)
}

// WithTx mocks base method.
func (m *MockAdminStore) WithTx(tx *sql.Tx) admin.AdminStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(admin.AdminStore)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockAdminStoreMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockAdminStore)(nil).WithTx), tx)
}

// MockTxManager is a mock of TxManager interface.
type MockTxManager struct {
	ctrl     *gomock.Controller
	recorder *MockTxManagerMockRecorder
	isgomock struct{}
}

// MockTxManagerMockRecorder is the mock recorder for MockTxManager.
type MockTxManagerMockRecorder struct {
	mock *MockTxManager
}

// NewMockTxManager creates a new mock instance.
func NewMockTxManager(ctrl *gomock.Controller) *MockTxManager {
	mock := &MockTxManager{ctrl: ctrl}
	mock.recorder = &MockTxManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxManager) EXPECT() *MockTxManagerMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxManager) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTxManagerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxManager)(nil).Begin))
}

// MockAmazonClient is a mock of AmazonClient interface.
type MockAmazonClient struct {
	ctrl     *gomock.Controller
	recorder *MockAmazonClientMockRecorder
	isgomock struct{}
}

// MockAmazonClientMockRecorder is the mock recorder for MockAmazonClient.
type MockAmazonClientMockRecorder struct {
	mock *MockAmazonClient
}

// NewMockAmazonClient creates a new mock instance.
func NewMockAmazonClient(ctrl *gomock.Controller) *MockAmazonClient {
	mock := &MockAmazonClient{ctrl: ctrl}
	mock.recorder = &MockAmazonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmazonClient) EXPECT() *MockAmazonClientMockRecorder {
	return m.recorder
}

// FetchAmazonProductDetails mocks base method.
func (m *MockAmazonClient) FetchAmazonProductDetails(ctx context.Context, asins []string) ([]admin.ProductDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAmazonProductDetails", ctx, asins)
	ret0, _ := ret[0].([]admin.ProductDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAmazonProductDetails indicates an expected call of FetchAmazonProductDetails.
func (mr *MockAmazonClientMockRecorder) FetchAmazonProductDetails(ctx, asins any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAmazonProductDetails", reflect.TypeOf((*MockAmazonClient)(nil).FetchAmazonProductDetails), ctx, asins)
}

// MockStorageClient is a mock of StorageClient interface.
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
	isgomock struct{}
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient.
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance.
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// PutObjectToAttachmentBucket mocks base method.
func (m *MockStorageClient) PutObjectToAttachmentBucket(ctx context.Context, key, contentType string, contentLength int64, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObjectToAttachmentBucket", ctx, key, contentType, contentLength, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObjectToAttachmentBucket indicates an expected call of PutObjectToAttachmentBucket.
func (mr *MockStorageClientMockRecorder) PutObjectToAttachmentBucket(ctx, key, contentType, contentLength, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObjectToAttachmentBucket", reflect.TypeOf((*MockStorageClient)(nil).PutObjectToAttachmentBucket), ctx, key, contentType, contentLength, reader)
}

// MockHubNotifier is a mock of HubNotifier interface.
type MockHubNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockHubNotifierMockRecorder
	isgomock struct{}
}

// MockHubNotifierMockRecorder is the mock recorder for MockHubNotifier.
type MockHubNotifierMockRecorder struct {
	mock *MockHubNotifier
}

// NewMockHubNotifier creates a new mock instance.
func NewMockHubNotifier(ctrl *gomock.Controller) *MockHubNotifier {
	mock := &MockHubNotifier{ctrl: ctrl}
	mock.recorder = &MockHubNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHubNotifier) EXPECT() *MockHubNotifierMockRecorder {
	return m.recorder
}

// NotifyHub mocks base method.
func (m *MockHubNotifier) NotifyHub(hubUrl, topicUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyHub", hubUrl, topicUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyHub indicates an expected call of NotifyHub.
func (mr *MockHubNotifierMockRecorder) NotifyHub(hubUrl, topicUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyHub", reflect.TypeOf((*MockHubNotifier)(nil).NotifyHub), hubUrl, topicUrl)
}

// MockEntryImageProcessor is a mock of EntryImageProcessor interface.
type MockEntryImageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockEntryImageProcessorMockRecorder
	isgomock struct{}
}

// MockEntryImageProcessorMockRecorder is the mock recorder for MockEntryImageProcessor.
type MockEntryImageProcessorMockRecorder struct {
	mock *MockEntryImageProcessor
}

// NewMockEntryImageProcessor creates a new mock instance.
func NewMockEntryImageProcessor(ctrl *gomock.Controller) *MockEntryImageProcessor {
	mock := &MockEntryImageProcessor{ctrl: ctrl}
	mock.recorder = &MockEntryImageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryImageProcessor) EXPECT() *MockEntryImageProcessorMockRecorder {
	return m.recorder
}

// GetEntryImageNotProcessedEntries mocks base method.
func (m *MockEntryImageProcessor) GetEntryImageNotProcessedEntries(ctx context.Context) ([]admindb.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryImageNotProcessedEntries", ctx)
	ret0, _ := ret[0].([]admindb.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryImageNotProcessedEntries indicates an expected call of GetEntryImageNotProcessedEntries.
func (mr *MockEntryImageProcessorMockRecorder) GetEntryImageNotProcessedEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryImageNotProcessedEntries", reflect.TypeOf((*MockEntryImageProcessor)(nil).GetEntryImageNotProcessedEntries), ctx)
}

// ProcessEntry mocks base method.
func (m *MockEntryImageProcessor) ProcessEntry(ctx context.Context, entry admindb.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessEntry indicates an expected call of ProcessEntry.
func (mr *MockEntryImageProcessorMockRecorder) ProcessEntry(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEntry", reflect.TypeOf((*MockEntryImageProcessor)(nil).ProcessEntry), ctx, entry)
}

// MockLinkPalletService is a mock of LinkPalletService interface.
type MockLinkPalletService struct {
	ctrl     *gomock.Controller
	recorder *MockLinkPalletServiceMockRecorder
	isgomock struct{}
}

// MockLinkPalletServiceMockRecorder is the mock recorder for MockLinkPalletService.
type MockLinkPalletServiceMockRecorder struct {
	mock *MockLinkPalletService
}

// NewMockLinkPalletService creates a new mock instance.
func NewMockLinkPalletService(ctrl *gomock.Controller) *MockLinkPalletService {
	mock := &MockLinkPalletService{ctrl: ctrl}
	mock.recorder = &MockLinkPalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkPalletService) EXPECT() *MockLinkPalletServiceMockRecorder {
	return m.recorder
}

// GetLinkPalletData mocks base method.
func (m *MockLinkPalletService) GetLinkPalletData(ctx context.Context, txManager admin.TxManager, store admin.AdminStore, path, title string) (*openapi.LinkPalletData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkPalletData", ctx, txManager, store, path, title)
	ret0, _ := ret[0].(*openapi.LinkPalletData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkPalletData indicates an expected call of GetLinkPalletData.
func (mr *MockLinkPalletServiceMockRecorder) GetLinkPalletData(ctx, txManager, store, path, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkPalletData", reflect.TypeOf((*MockLinkPalletService)(nil).GetLinkPalletData), ctx, txManager, store, path, title)
}
