version: '3'

interval: 500ms

tasks:
  tsp:
    cmds:
      - tsp compile main.tsp --emit @typespec/openapi3
    dir: ./typespec/
    sources:
      - typespec/**/*.tsp
    generates:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml

  frontend:
    cmds:
      - npm run dev
    dir: ./server/admin/frontend
    desc: "Run the Node.js development server"

  frontend-build:
    deps: [npmi, openapi-client]
    watch: true
    cmds:
      - cd ./server/admin/frontend && npm run build
    sources:
      - ./server/admin/frontend/package.json
      - ./server/admin/frontend/package-lock.json
      - ./server/admin/frontend/tsconfig.json
      - ./server/admin/frontend/src/**/*.svelte
    generates:
      - ./server/admin/frontend/dist/index.html
      - ./server/admin/frontend/dist/**/*.js
    desc: "Build the frontend"

  sqlc-admin:
    cmds:
      - go tool sqlc generate -f ./db/admin/sqlc-admin.yml
    sources:
      - ./db/admin/sqlc-admin.yml
      - ./db/admin/queries/admin.sql
      - ./db/admin/queries/visibility.sql
      - ./db/schema.sql
    generates:
      - ./db/admin/admindb/db.go
      - ./db/admin/admindb/models.go
      - ./db/admin/admindb/public.sql.go
    desc: "Generate SQLC code for admin database"

  sqlc-public:
    cmds:
      - sqlc generate -f ./db/public/sqlc-public.yml
    sources:
      - ./db/public/sqlc-public.yml
      - ./db/public/queries/**/*.sql
      - ./db/schema.sql
    generates:
      - ./db/public/publicdb/db.go
      - ./db/public/publicdb/models.go
      - ./db/public/publicdb/public.sql.go
    desc: "Generate SQLC code"

  sqlc:
    deps: [sqlc-admin, sqlc-public]
    desc: "Run SQLC generation for both admin and public databases"

  dev:
    deps: [sqlc, frontend, frontend-build, ogen, openapi-client]
    desc: "Run both SQLC generation and Node.js dev server"

  gen:
    deps: [ogen, openapi-client, sqlc]
    desc: "Generate OpenAPI server and client code"

  ogen:
    deps: ['tsp']
    cmds:
      - go generate ./cmd/blog4/main.go
    sources:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml
      - ./cmd/blog4/main.go
    generates:
      - ./server/admin/openapi/oas_cfg_gen.go
      - ./server/admin/openapi/oas_client_gen.go
    desc: "Generate OpenAPI server code"

  npmi:
    cmds:
      - npm install
    dir: ./server/admin/frontend
    sources:
      - ./server/admin/frontend/package.json
      - ./server/admin/frontend/package-lock.json
    desc: "Install npm dependencies"

  openapi-client:
    deps: [npmi, tsp]
    dir: ./server/admin/frontend
    cmds:
      - npm run generate-client
    sources:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml
      - orval.config.ts
    generates:
      - ./src/generated-client/adminApi.ts
      - ./src/generated-client/model
    desc: "Generate OpenAPI client code with Orval"

  docker-build:
    cmds:
      - docker build -t blog4 .
    sources:
      - Dockerfile

  docker-run:
    cmds:
      - docker run --rm -it --env-file .env -p 8080:8080 blog4

  fmt:
    desc: "Format Go code with goimports"
    cmds:
      - go fmt ./...
      - goimports -w -local github.com/tokuhirom/blog4 .
    sources:
      - '**/*.go'

  lint:
    desc: "Run linters"
    cmds:
      - goimports -d -local github.com/tokuhirom/blog4 .
      - go vet ./...

  biome-format:
    desc: "Format frontend code with Biome"
    dir: ./server/admin/frontend
    cmds:
      - npm run format
    sources:
      - 'src/**/*.{js,ts,jsx,tsx,svelte,json,jsonc}'
      - '*.{js,ts,json,jsonc}'

  biome-lint:
    desc: "Lint frontend code with Biome"
    dir: ./server/admin/frontend
    cmds:
      - npm run lint

  biome-check:
    desc: "Check frontend code with Biome (format and lint)"
    dir: ./server/admin/frontend
    cmds:
      - npx biome check .

  frontend-fmt:
    desc: "Format and lint frontend code"
    deps: [biome-format, biome-lint]
