version: '3'

interval: 500ms

tasks:
  tsp:
    cmds:
      - tsp compile main.tsp --emit @typespec/openapi3
    dir: ./typespec/
    watch: true
    sources:
      - typespec/**/*.tsp
    generates:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml

  frontend:
    cmds:
      - npm run dev
    dir: ./server/admin/frontend
    desc: "Run the Node.js development server"

  frontend-build:
    deps: [npmi]
    watch: true
    cmds:
      - npm run build
    dir: ./server/admin/frontend
    sources:
      - ./server/admin/frontend/package.json
      - ./server/admin/frontend/package-lock.json
      - ./server/admin/frontend/tsconfig.json
      - ./server/admin/frontend/src/**/*
    generates:
      - ./server/admin/frontend/dist/index.html
    desc: "Build the frontend"

  sqlc-admin:
    watch: true
    cmds:
      - go tool sqlc generate -f ./db/admin/sqlc-admin.yml
    sources:
      - ./db/admin/sqlc-admin.yml
      - ./db/admin/queries/admin.sql
      - ./db/admin/queries/visibility.sql
      - ./db/schema.sql
    generates:
      - ./db/admin/admindb/db.go
      - ./db/admin/admindb/models.go
      - ./db/admin/admindb/public.sql.go
    desc: "Generate SQLC code for admin database"

  sqlc-public:
    watch: true
    cmds:
      - sqlc generate -f ./db/public/sqlc-public.yml
    sources:
      - ./db/public/sqlc-public.yml
      - ./db/public/queries/**/*.sql
      - ./db/schema.sql
    generates:
      - ./db/public/publicdb/db.go
      - ./db/public/publicdb/models.go
      - ./db/public/publicdb/public.sql.go
    desc: "Generate SQLC code"

  sqlc:
    deps: [sqlc-admin, sqlc-public]
    desc: "Run SQLC generation for both admin and public databases"

  dev:
    deps: [sqlc, frontend, frontend-build, ogen, openapi-client]
    desc: "Run both SQLC generation and Node.js dev server"

  gen:
    deps: [ogen, openapi-client, sqlc]
    watch: true
    desc: "Generate OpenAPI server and client code"

  ogen:
    deps: ['tsp']
    cmds:
      - go generate main.go
    watch: true
    sources:
      - typespec/tsp-output/@typespec/openapi3/openapi.yaml
      - main.go
    generates:
      - ./server/admin/openapi/oas_cfg_gen.go
      - ./server/admin/openapi/oas_client_gen.go
    desc: "Generate OpenAPI server code"

  npmi:
    cmds:
      - npm install
    dir: ./server/admin/frontend
    sources:
      - ./server/admin/frontend/package.json
      - ./server/admin/frontend/package-lock.json
    desc: "Install npm dependencies"

  openapi-client:
    deps: [npmi]
    dir: ./server/admin/frontend
    watch: true
    cmds:
      - npx openapi-generator-cli generate -i ../../../openapi.yml -g typescript-fetch -o ./src/generated-client
    sources:
      - ../../../openapi.yml
    generates:
      - ./src/generated-client
      - ./src/generated-client/runtime.ts
    desc: "Generate OpenAPI client code"

  docker-build:
    cmds:
      - docker build -t blog4 .
    sources:
      - Dockerfile

  docker-run:
    cmds:
      - docker run --rm -it --env-file .env -p 8080:8080 blog4
