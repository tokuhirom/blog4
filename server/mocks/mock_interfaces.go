// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	admindb "github.com/tokuhirom/blog4/db/admin/admindb"
	gomock "go.uber.org/mock/gomock"
)

// MockEntryImageStore is a mock of EntryImageStore interface.
type MockEntryImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockEntryImageStoreMockRecorder
	isgomock struct{}
}

// MockEntryImageStoreMockRecorder is the mock recorder for MockEntryImageStore.
type MockEntryImageStoreMockRecorder struct {
	mock *MockEntryImageStore
}

// NewMockEntryImageStore creates a new mock instance.
func NewMockEntryImageStore(ctrl *gomock.Controller) *MockEntryImageStore {
	mock := &MockEntryImageStore{ctrl: ctrl}
	mock.recorder = &MockEntryImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryImageStore) EXPECT() *MockEntryImageStoreMockRecorder {
	return m.recorder
}

// GetAmazonImageUrlByAsin mocks base method.
func (m *MockEntryImageStore) GetAmazonImageUrlByAsin(ctx context.Context, asin string) (sql.NullString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAmazonImageUrlByAsin", ctx, asin)
	ret0, _ := ret[0].(sql.NullString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAmazonImageUrlByAsin indicates an expected call of GetAmazonImageUrlByAsin.
func (mr *MockEntryImageStoreMockRecorder) GetAmazonImageUrlByAsin(ctx, asin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAmazonImageUrlByAsin", reflect.TypeOf((*MockEntryImageStore)(nil).GetAmazonImageUrlByAsin), ctx, asin)
}

// GetEntryImageNotProcessedEntries mocks base method.
func (m *MockEntryImageStore) GetEntryImageNotProcessedEntries(ctx context.Context) ([]admindb.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntryImageNotProcessedEntries", ctx)
	ret0, _ := ret[0].([]admindb.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryImageNotProcessedEntries indicates an expected call of GetEntryImageNotProcessedEntries.
func (mr *MockEntryImageStoreMockRecorder) GetEntryImageNotProcessedEntries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryImageNotProcessedEntries", reflect.TypeOf((*MockEntryImageStore)(nil).GetEntryImageNotProcessedEntries), ctx)
}

// InsertEntryImage mocks base method.
func (m *MockEntryImageStore) InsertEntryImage(ctx context.Context, params admindb.InsertEntryImageParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEntryImage", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEntryImage indicates an expected call of InsertEntryImage.
func (mr *MockEntryImageStoreMockRecorder) InsertEntryImage(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEntryImage", reflect.TypeOf((*MockEntryImageStore)(nil).InsertEntryImage), ctx, params)
}
