// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pi/build-info"

					if l := len("pi/build-info"); len(elem) >= l && elem[0:l] == "pi/build-info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetBuildInfoRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'u': // Prefix: "uth/"

					if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "check"

						if l := len("check"); len(elem) >= l && elem[0:l] == "check" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAuthCheckRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'l': // Prefix: "log"

						if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"

							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAuthLoginRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						case 'o': // Prefix: "out"

							if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAuthLogoutRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}

						}

					}

				}

			case 'e': // Prefix: "entr"

				if l := len("entr"); len(elem) >= l && elem[0:l] == "entr" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ies"

					if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetLatestEntriesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateEntryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "titles"
							origElem := elem
							if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetAllEntryTitlesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "path"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteEntryRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetEntryByDynamicPathRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "body"

								if l := len("body"); len(elem) >= l && elem[0:l] == "body" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleUpdateEntryBodyRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

							case 'l': // Prefix: "link"

								if l := len("link"); len(elem) >= l && elem[0:l] == "link" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '-': // Prefix: "-pallet"

									if l := len("-pallet"); len(elem) >= l && elem[0:l] == "-pallet" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetLinkPalletRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'e': // Prefix: "ed-paths"

									if l := len("ed-paths"); len(elem) >= l && elem[0:l] == "ed-paths" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetLinkedEntryPathsRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							case 'r': // Prefix: "regenerate-image"

								if l := len("regenerate-image"); len(elem) >= l && elem[0:l] == "regenerate-image" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleRegenerateEntryImageRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

							case 't': // Prefix: "title"

								if l := len("title"); len(elem) >= l && elem[0:l] == "title" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleUpdateEntryTitleRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

							}

						}

					}

				case 'y': // Prefix: "y/"

					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/visibility"

						if l := len("/visibility"); len(elem) >= l && elem[0:l] == "/visibility" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUpdateEntryVisibilityRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'u': // Prefix: "upload"

				if l := len("upload"); len(elem) >= l && elem[0:l] == "upload" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleUploadFileRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "a"

				if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'p': // Prefix: "pi/build-info"

					if l := len("pi/build-info"); len(elem) >= l && elem[0:l] == "pi/build-info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetBuildInfoOperation
							r.summary = ""
							r.operationID = "getBuildInfo"
							r.pathPattern = "/api/build-info"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'u': // Prefix: "uth/"

					if l := len("uth/"); len(elem) >= l && elem[0:l] == "uth/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "check"

						if l := len("check"); len(elem) >= l && elem[0:l] == "check" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = AuthCheckOperation
								r.summary = "Check if user is authenticated"
								r.operationID = "Auth_check"
								r.pathPattern = "/auth/check"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'l': // Prefix: "log"

						if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"

							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = AuthLoginOperation
									r.summary = "Login with username and password"
									r.operationID = "Auth_login"
									r.pathPattern = "/auth/login"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'o': // Prefix: "out"

							if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "POST":
									r.name = AuthLogoutOperation
									r.summary = "Logout and invalidate session"
									r.operationID = "Auth_logout"
									r.pathPattern = "/auth/logout"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			case 'e': // Prefix: "entr"

				if l := len("entr"); len(elem) >= l && elem[0:l] == "entr" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ies"

					if l := len("ies"); len(elem) >= l && elem[0:l] == "ies" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetLatestEntriesOperation
							r.summary = "Get latest entries"
							r.operationID = "getLatestEntries"
							r.pathPattern = "/entries"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateEntryOperation
							r.summary = "Create a new entry"
							r.operationID = "createEntry"
							r.pathPattern = "/entries"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 't': // Prefix: "titles"
							origElem := elem
							if l := len("titles"); len(elem) >= l && elem[0:l] == "titles" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetAllEntryTitlesOperation
									r.summary = "Get all entry titles"
									r.operationID = "getAllEntryTitles"
									r.pathPattern = "/entries/titles"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "path"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = DeleteEntryOperation
								r.summary = "Delete an entry"
								r.operationID = "deleteEntry"
								r.pathPattern = "/entries/{path}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetEntryByDynamicPathOperation
								r.summary = "Get entry by dynamic path"
								r.operationID = "getEntryByDynamicPath"
								r.pathPattern = "/entries/{path}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "body"

								if l := len("body"); len(elem) >= l && elem[0:l] == "body" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = UpdateEntryBodyOperation
										r.summary = "Update entry body"
										r.operationID = "updateEntryBody"
										r.pathPattern = "/entries/{path}/body"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 'l': // Prefix: "link"

								if l := len("link"); len(elem) >= l && elem[0:l] == "link" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case '-': // Prefix: "-pallet"

									if l := len("-pallet"); len(elem) >= l && elem[0:l] == "-pallet" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetLinkPalletOperation
											r.summary = "Get linked entry paths"
											r.operationID = "getLinkPallet"
											r.pathPattern = "/entries/{path}/link-pallet"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'e': // Prefix: "ed-paths"

									if l := len("ed-paths"); len(elem) >= l && elem[0:l] == "ed-paths" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetLinkedEntryPathsOperation
											r.summary = "Get linked entry paths"
											r.operationID = "getLinkedEntryPaths"
											r.pathPattern = "/entries/{path}/linked-paths"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							case 'r': // Prefix: "regenerate-image"

								if l := len("regenerate-image"); len(elem) >= l && elem[0:l] == "regenerate-image" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = RegenerateEntryImageOperation
										r.summary = "Regenerate entry image"
										r.operationID = "regenerateEntryImage"
										r.pathPattern = "/entries/{path}/regenerate-image"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							case 't': // Prefix: "title"

								if l := len("title"); len(elem) >= l && elem[0:l] == "title" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = UpdateEntryTitleOperation
										r.summary = "Update entry title"
										r.operationID = "updateEntryTitle"
										r.pathPattern = "/entries/{path}/title"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						}

					}

				case 'y': // Prefix: "y/"

					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "path"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/visibility"

						if l := len("/visibility"); len(elem) >= l && elem[0:l] == "/visibility" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = UpdateEntryVisibilityOperation
								r.summary = "Update entry visibility"
								r.operationID = "updateEntryVisibility"
								r.pathPattern = "/entry/{path}/visibility"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'u': // Prefix: "upload"

				if l := len("upload"); len(elem) >= l && elem[0:l] == "upload" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = UploadFileOperation
						r.summary = ""
						r.operationID = "uploadFile"
						r.pathPattern = "/upload"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			}

		}
	}
	return r, false
}
