/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Admin API
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateEntryRequest,
  CreateEntryResponse,
  DeleteEntryPathParameters,
  EmptyResponse,
  EntryTitlesResponse,
  ErrorResponse,
  GetEntryByDynamicPathPathParameters,
  GetLatestEntriesParams,
  GetLatestEntriesRow,
  GetLinkPalletPathParameters,
  GetLinkedEntryPathsPathParameters,
  LinkPalletData,
  LinkedEntryPathsResponse,
  RegenerateEntryImagePathParameters,
  UpdateEntryBodyPathParameters,
  UpdateEntryBodyRequest,
  UpdateEntryTitlePathParameters,
  UpdateEntryTitleRequest,
  UpdateEntryVisibilityPathParameters,
  UpdateVisibilityRequest,
  UpdateVisibilityResponse,
  UploadFileRequest,
  UploadFileResponse
} from './model';

import { customInstance } from '../api/custom-instance';
export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;

/**
 * @summary Get latest entries
 */
export type getLatestEntriesResponse200 = {
  data: GetLatestEntriesRow[]
  status: 200
}

export type getLatestEntriesResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getLatestEntriesResponseComposite = getLatestEntriesResponse200 | getLatestEntriesResponseDefault;
    
export type getLatestEntriesResponse = getLatestEntriesResponseComposite & {
  headers: Headers;
}

export const getGetLatestEntriesUrl = (params?: GetLatestEntriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/entries?${stringifiedParams}` : `/entries`
}

export const getLatestEntries = async (params?: GetLatestEntriesParams, options?: RequestInit): Promise<getLatestEntriesResponse> => {
  
  return customInstance<getLatestEntriesResponse>(getGetLatestEntriesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Create a new entry
 */
export type createEntryResponse201 = {
  data: CreateEntryResponse
  status: 201
}

export type createEntryResponse409 = {
  data: ErrorResponse
  status: 409
}
    
export type createEntryResponseComposite = createEntryResponse201 | createEntryResponse409;
    
export type createEntryResponse = createEntryResponseComposite & {
  headers: Headers;
}

export const getCreateEntryUrl = () => {


  

  return `/entries`
}

export const createEntry = async (createEntryRequest: CreateEntryRequest, options?: RequestInit): Promise<createEntryResponse> => {
  
  return customInstance<createEntryResponse>(getCreateEntryUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createEntryRequest,)
  }
);}



/**
 * @summary Get all entry titles
 */
export type getAllEntryTitlesResponse200 = {
  data: EntryTitlesResponse
  status: 200
}

export type getAllEntryTitlesResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getAllEntryTitlesResponseComposite = getAllEntryTitlesResponse200 | getAllEntryTitlesResponseDefault;
    
export type getAllEntryTitlesResponse = getAllEntryTitlesResponseComposite & {
  headers: Headers;
}

export const getGetAllEntryTitlesUrl = () => {


  

  return `/entries/titles`
}

export const getAllEntryTitles = async ( options?: RequestInit): Promise<getAllEntryTitlesResponse> => {
  
  return customInstance<getAllEntryTitlesResponse>(getGetAllEntryTitlesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Delete an entry
 */
export type deleteEntryResponse200 = {
  data: EmptyResponse
  status: 200
}

export type deleteEntryResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type deleteEntryResponseComposite = deleteEntryResponse200 | deleteEntryResponse404;
    
export type deleteEntryResponse = deleteEntryResponseComposite & {
  headers: Headers;
}

export const getDeleteEntryUrl = ({ path }: DeleteEntryPathParameters,) => {


  

  return `/entries/${path}`
}

export const deleteEntry = async ({ path }: DeleteEntryPathParameters, options?: RequestInit): Promise<deleteEntryResponse> => {
  
  return customInstance<deleteEntryResponse>(getDeleteEntryUrl({ path }),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * @summary Get entry by dynamic path
 */
export type getEntryByDynamicPathResponse200 = {
  data: GetLatestEntriesRow
  status: 200
}

export type getEntryByDynamicPathResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getEntryByDynamicPathResponseComposite = getEntryByDynamicPathResponse200 | getEntryByDynamicPathResponseDefault;
    
export type getEntryByDynamicPathResponse = getEntryByDynamicPathResponseComposite & {
  headers: Headers;
}

export const getGetEntryByDynamicPathUrl = ({ path }: GetEntryByDynamicPathPathParameters,) => {


  

  return `/entries/${path}`
}

export const getEntryByDynamicPath = async ({ path }: GetEntryByDynamicPathPathParameters, options?: RequestInit): Promise<getEntryByDynamicPathResponse> => {
  
  return customInstance<getEntryByDynamicPathResponse>(getGetEntryByDynamicPathUrl({ path }),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Update entry body
 */
export type updateEntryBodyResponse200 = {
  data: EmptyResponse
  status: 200
}

export type updateEntryBodyResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type updateEntryBodyResponseComposite = updateEntryBodyResponse200 | updateEntryBodyResponse404;
    
export type updateEntryBodyResponse = updateEntryBodyResponseComposite & {
  headers: Headers;
}

export const getUpdateEntryBodyUrl = ({ path }: UpdateEntryBodyPathParameters,) => {


  

  return `/entries/${path}/body`
}

export const updateEntryBody = async ({ path }: UpdateEntryBodyPathParameters,
    updateEntryBodyRequest: UpdateEntryBodyRequest, options?: RequestInit): Promise<updateEntryBodyResponse> => {
  
  return customInstance<updateEntryBodyResponse>(getUpdateEntryBodyUrl({ path }),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateEntryBodyRequest,)
  }
);}



/**
 * @summary Get linked entry paths
 */
export type getLinkPalletResponse200 = {
  data: LinkPalletData
  status: 200
}

export type getLinkPalletResponseDefault = {
  data: ErrorResponse
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getLinkPalletResponseComposite = getLinkPalletResponse200 | getLinkPalletResponseDefault;
    
export type getLinkPalletResponse = getLinkPalletResponseComposite & {
  headers: Headers;
}

export const getGetLinkPalletUrl = ({ path }: GetLinkPalletPathParameters,) => {


  

  return `/entries/${path}/link-pallet`
}

export const getLinkPallet = async ({ path }: GetLinkPalletPathParameters, options?: RequestInit): Promise<getLinkPalletResponse> => {
  
  return customInstance<getLinkPalletResponse>(getGetLinkPalletUrl({ path }),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Get linked entry paths
 */
export type getLinkedEntryPathsResponse200 = {
  data: LinkedEntryPathsResponse
  status: 200
}

export type getLinkedEntryPathsResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type getLinkedEntryPathsResponseComposite = getLinkedEntryPathsResponse200 | getLinkedEntryPathsResponse404;
    
export type getLinkedEntryPathsResponse = getLinkedEntryPathsResponseComposite & {
  headers: Headers;
}

export const getGetLinkedEntryPathsUrl = ({ path }: GetLinkedEntryPathsPathParameters,) => {


  

  return `/entries/${path}/linked-paths`
}

export const getLinkedEntryPaths = async ({ path }: GetLinkedEntryPathsPathParameters, options?: RequestInit): Promise<getLinkedEntryPathsResponse> => {
  
  return customInstance<getLinkedEntryPathsResponse>(getGetLinkedEntryPathsUrl({ path }),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * @summary Regenerate entry image
 */
export type regenerateEntryImageResponse200 = {
  data: EmptyResponse
  status: 200
}

export type regenerateEntryImageResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type regenerateEntryImageResponseComposite = regenerateEntryImageResponse200 | regenerateEntryImageResponse404;
    
export type regenerateEntryImageResponse = regenerateEntryImageResponseComposite & {
  headers: Headers;
}

export const getRegenerateEntryImageUrl = ({ path }: RegenerateEntryImagePathParameters,) => {


  

  return `/entries/${path}/regenerate-image`
}

export const regenerateEntryImage = async ({ path }: RegenerateEntryImagePathParameters, options?: RequestInit): Promise<regenerateEntryImageResponse> => {
  
  return customInstance<regenerateEntryImageResponse>(getRegenerateEntryImageUrl({ path }),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * @summary Update entry title
 */
export type updateEntryTitleResponse200 = {
  data: EmptyResponse
  status: 200
}

export type updateEntryTitleResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type updateEntryTitleResponseComposite = updateEntryTitleResponse200 | updateEntryTitleResponse404;
    
export type updateEntryTitleResponse = updateEntryTitleResponseComposite & {
  headers: Headers;
}

export const getUpdateEntryTitleUrl = ({ path }: UpdateEntryTitlePathParameters,) => {


  

  return `/entries/${path}/title`
}

export const updateEntryTitle = async ({ path }: UpdateEntryTitlePathParameters,
    updateEntryTitleRequest: UpdateEntryTitleRequest, options?: RequestInit): Promise<updateEntryTitleResponse> => {
  
  return customInstance<updateEntryTitleResponse>(getUpdateEntryTitleUrl({ path }),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateEntryTitleRequest,)
  }
);}



/**
 * @summary Update entry visibility
 */
export type updateEntryVisibilityResponse200 = {
  data: UpdateVisibilityResponse
  status: 200
}

export type updateEntryVisibilityResponse404 = {
  data: ErrorResponse
  status: 404
}
    
export type updateEntryVisibilityResponseComposite = updateEntryVisibilityResponse200 | updateEntryVisibilityResponse404;
    
export type updateEntryVisibilityResponse = updateEntryVisibilityResponseComposite & {
  headers: Headers;
}

export const getUpdateEntryVisibilityUrl = ({ path }: UpdateEntryVisibilityPathParameters,) => {


  

  return `/entry/${path}/visibility`
}

export const updateEntryVisibility = async ({ path }: UpdateEntryVisibilityPathParameters,
    updateVisibilityRequest: UpdateVisibilityRequest, options?: RequestInit): Promise<updateEntryVisibilityResponse> => {
  
  return customInstance<updateEntryVisibilityResponse>(getUpdateEntryVisibilityUrl({ path }),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateVisibilityRequest,)
  }
);}



export type uploadFileResponse200 = {
  data: UploadFileResponse
  status: 200
}

export type uploadFileResponse400 = {
  data: void
  status: 400
}
    
export type uploadFileResponseComposite = uploadFileResponse200 | uploadFileResponse400;
    
export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
}

export const getUploadFileUrl = () => {


  

  return `/upload`
}

export const uploadFile = async (uploadFileRequest: UploadFileRequest, options?: RequestInit): Promise<uploadFileResponse> => {
    const formData = new FormData();
formData.append(`file`, uploadFileRequest.file)

  return customInstance<uploadFileResponse>(getUploadFileUrl(),
  {      
    ...options,
    method: 'POST'
    ,
    body: 
      formData,
  }
);}
