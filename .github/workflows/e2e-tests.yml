name: E2E Tests

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:11.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: blog4
          MYSQL_USER: blog4user
          MYSQL_PASSWORD: blog4password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -prootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      
      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: '1.24'

      - name: Install go-task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d
          sudo mv ./bin/task /usr/local/bin/

      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: web/admin/pnpm-lock.yaml

      - name: Install TypeSpec dependencies
        run: pnpm install --frozen-lockfile

      - name: Install sqlc
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/kyleconroy/sqlc/releases/download/v1.24.0/sqlc_1.24.0_linux_amd64.tar.gz
          sudo tar -xzf sqlc_1.24.0_linux_amd64.tar.gz -C /usr/local/bin sqlc

      - name: Generate code
        run: task gen

      - name: Setup database
        run: |
          mysql -h127.0.0.1 -uroot -prootpassword blog4 < db/init/01-schema.sql
          mysql -h127.0.0.1 -uroot -prootpassword blog4 < db/init/02-dummy-data.sql
        env:
          MYSQL_HOST: 127.0.0.1

      - name: build blog4 backend
        run: go build -o blog4 ./cmd/blog4

      - name: Start blog4 backend
        run: ./blog4 &
        env:
          # Database configuration
          DATABASE_USER: blog4user
          DATABASE_PASSWORD: blog4password
          DATABASE_HOST: 127.0.0.1
          DATABASE_PORT: 3306
          DATABASE_DB: blog4

          # Application configuration
          BLOG_PORT: 8181
          LOCAL_DEV: true
          ALLOWED_ORIGINS: 'http://localhost:6173,http://localhost:6174'
          ADMIN_USER: admin
          ADMIN_PW: password

          # S3 configuration (using MinIO for local dev)
          S3_ACCESS_KEY_ID: minioadmin
          S3_SECRET_ACCESS_KEY: minioadmin
          S3_REGION: us-east-1
          S3_ATTACHMENTS_BUCKET_NAME: blog4-attachments
          S3_BACKUP_BUCKET_NAME: blog4-backup
          S3_ENDPOINT: 'minio:9000'

          # Other optional configuration
          AMAZON_PAAPI5_ACCESS_KEY: 'DUMMYACCESSKEYDUMMYACCESSKEY'
          AMAZON_PAAPI5_SECRET_KEY: 'DUMMYSECRETKEYDUMMYSECRETKEY'
          BACKUP_ENCRYPTION_KEY: 'DUMMYENCRYPTIONKEYDUMMYENCRYPTIONKEY'
          KEEP_ALIVE_URL: 'http://localhost:8181/keep-alive'
          # HUB_URLS is not used in this test, but required for the app to start
          HUB_URLS: 'http://localhost:9090/hub'

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8181/healthz; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend..."
            sleep 2
          done

      - name: Check CORS headers
        run: |+
          curl -v -H "Origin: http://localhost:6174" -H "Access-Control-Request-Method: GET" -H "Access-Control-Request-Headers: Content-Type" -X OPTIONS http://localhost:8181/admin/api/auth/check

      - name: Install frontend dependencies
        working-directory: web/admin
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        working-directory: web/admin
        run: pnpm run build

      - name: Install Playwright
        working-directory: web/admin
        run: pnpm run test:e2e:install

      - name: Run E2E tests
        working-directory: web/admin
        run: pnpm run test:e2e

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: always()
        with:
          name: playwright-report
          path: web/admin/playwright-report/
          retention-days: 30
